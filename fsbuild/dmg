#!/usr/bin/env python3
# This file is automatically generated by fs-package

import os
import subprocess
import sys
import time
import xml.etree.ElementTree as ET
from os import path
from typing import Dict

package: Dict[str, str] = {}
with open("PACKAGE.FS", "r") as f:
    for line in f:
        try:
            key, value = line.strip().split("=", 1)
            package[key] = value
        except ValueError:
            pass
if package["PACKAGE_TYPE"] == "fs-data-plugin":
    print("Not signing data plugin")
    sys.exit(0)
package_name_pretty = package["PACKAGE_NAME_PRETTY"]
package_version = package["PACKAGE_VERSION"]
bundle_id = package["PACKAGE_MACOS_BUNDLE_ID"]
app = package_name_pretty + ".app"
# framework = package_name_pretty + ".framework"
arch = "x86-64"  # FIXME

apple_id_user = os.environ.get("NOTARIZATION_USERNAME", "")
itc_provider = os.environ.get("NOTARIZATION_PROVIDER", "")

# def get_package():
#     global _package_name
#     if _package_name is None:
#         with open("fsbuild/PACKAGE", "r") as f:
#             _package_name = f.read().strip()
#     return _package_name


# def get_arch():
#     # FIXME: Detect properly
#     return "x86-64"


def macos_dmg_path():
    path = f"fsbuild/_dist/{package_name_pretty}_{package_version}_macOS_{arch}.dmg"
    return path


def macos_bundle_path():
    path = f"fsbuild/_build/{package_name_pretty}/macOS/{arch}/{app}"
    if os.path.exists(path):
        return path
    raise Exception("Could not find any app or framework bundle")


def q(arg: str) -> str:
    if " " in arg:
        return f'"{arg}"'
    return arg


def shell(cmd: str):
    print(cmd)
    return subprocess.run(
        cmd, shell=True, check=True, stdout=subprocess.PIPE
    ).stdout.decode("UTF-8")


def build_dmg():
    dmgPath = macos_dmg_path()
    print(f"Building {path.basename(dmgPath)}")
    if not path.exists(path.dirname(dmgPath)):
        os.makedirs(path.dirname(dmgPath))
    appPath = macos_bundle_path()
    settingsPath = "fsbuild/_build/dmgbuild-settings.py"
    with open(settingsPath, "w", encoding="UTF-8") as f:
        f.write("format = 'UDZO'\n")
        f.write("files = [\n")
        f.write(f"    '{appPath}',\n")
        f.write("]\n")
        f.write("symlinks = { 'Applications': '/Applications' }\n")
        f.write("badge_icon = 'icon/fs-uae-launcher.icns'\n")
    subprocess.check_call(
        [
            "dmgbuild",
            "-s",
            settingsPath,
            "FS-UAE-Launcher",
            dmgPath,
        ]
    )


def sign_dmg():
    dmgPath = macos_dmg_path()
    print(f"Signing {path.basename(dmgPath)}")
    assert path.exists(dmgPath)

    # Signing sometimes fails due to Apple errors (timeouts, etc). So we try
    # multiple times before giving up.
    for i in range(20):
        args = [
            "codesign",
            "--force",
            # "--deep",
            # "--options=runtime",
            "--sign",
            "Developer ID Application",
        ]
        # if os.path.exists("fsbuild/Entitlements.plist"):
        #     args.extend(["--entitlements", "fsbuild/Entitlements.plist"])
        args.append(dmgPath)

        print(" ".join(f"{q(a)}" for a in args))
        p = subprocess.Popen(args)
        if p.wait() == 0:
            break
        time.sleep(1.0 * i)
        print("Attempt", i + 2)
    else:
        print("Giving up")
        sys.exit(1)


def notarize_dmg():
    dmgPath = macos_dmg_path()
    assert path.exists(dmgPath)
    print(f"Notarizing {path.basename(dmgPath)}")
    # bundle = os.path.basename(bundle_path)
    # bundle_parent_dir = os.path.dirname(bundle_path)
    # shell("rm -f fsbuild/_build/notarize.zip")
    # zip = "../../../notarize.zip"
    # shell(f'cd {bundle_parent_dir} && ditto -c -k --keepParent "{bundle}" "{zip}"')
    result = shell(
        "xcrun altool --notarize-app -t osx "
        "-f {dmg_path} "
        "--primary-bundle-id {bundle_id} "
        "-u {apple_id_user} "
        "-p @env:NOTARIZATION_PASSWORD "
        "-itc_provider {itc_provider} "
        "--output-format xml".format(
            apple_id_user=apple_id_user,
            bundle_id=bundle_id,
            dmg_path=dmgPath,
            itc_provider=itc_provider,
        )
    )
    print(result)
    root = ET.fromstring(result)
    dictNode = root.find("dict")
    assert dictNode is not None
    dictNode2 = dictNode.find("dict")
    assert dictNode2 is not None
    stringNode = dictNode2.find("string")
    assert stringNode is not None
    requestUuid = stringNode.text
    print(requestUuid)

    for _ in range(60):
        time.sleep(10.0)
        result = shell(
            "xcrun altool --notarization-info {} "
            "-u {} -p @env:NOTARIZATION_PASSWORD "
            "-itc_provider {} --output-format xml".format(
                requestUuid, apple_id_user, itc_provider
            )
        )
        if "<string>success</string>" in result:
            break
        elif "<string>in progress</string>" in result:
            print("in progress...")
            continue
        else:
            print(result)
            raise Exception("...")

    print('xcrun stapler staple "{}"'.format(dmgPath))
    assert os.system('xcrun stapler staple "{}"'.format(dmgPath)) == 0

    print("-" * 80)
    print(f"[FSBUILD] Notarized {dmgPath}")


def main():
    if sys.platform != "darwin":
        print("Not creating DMG (non-macOS platform)")
        sys.exit(0)
    build_dmg()
    sign_dmg()
    notarize_dmg()


if __name__ == "__main__":
    main()
